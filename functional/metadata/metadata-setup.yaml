# Tests of metadata service.
# Notes on json validation:
#   must supply count or expected
#   if supply expected can optionally specify operator
#   operator defaults to "eq", available values are: abs contains eq ge gt index inv invert le lt ne neg not pos truth
#   operator is applied as: <actual> <operator> <expected>
---
- config:
    - testset: "Metadata: Setup"
    - headers: {Content-Type: application/json}
    - certificate_path: "../../../lb-load-client.pem"

# Tests that do not require any specific state.

- test: # verify get versions for invalid entity
    - name: "Invalid Entity"
    - url: "/metadata/ThisEntityDoesNotExist" 
    - method: GET
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "versions", operator: "count", expected: 0}

# Verify initial state.

- test: # verify initial state, should not have any versions for the entity being tested
    - name: "Initial State"
    - url: "/metadata/${ENTITY_NAME}"
    - method: GET
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - validators:
        - {query: "entities", operator: "count", expected: 0}

# Create v1 of the entity.

- test: # create entity
    - name: "Create Metadata"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - headers: {Content-Type: application/json}
    - group: "metadata/PUT"
    - method: PUT
    - body: {file: "test-metadata-insert.json"}
    - stop_on_failure: True
    - validators:
        - {query: "objectType", operator: "empty", expected: ""}

# Verify v1.

- test: # verify getting entity name list
    - name: "Verify Create: /metadata"
    - url: "/metadata" 
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - expected_status: 200
    - stop_on_failure: true
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entities", operator: "gt", expected: 0}
        - {query: "entities", operator: "contains", expected: "${ENTITY_NAME}"}

- test: # verify get versions for valid entity
    - name: "Verify Create: /metadata/entity"
    - url: "/metadata/${ENTITY_NAME}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "versions", operator: "count", expected: 1}

- test: # verify get specific version
    - name: "Verify Create: /metadata/entity/v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "entityInfo/defaultVersion", operator: "empty", expected: ""}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "active"}

# Create v2 of the entity.

- test: # create schema
    - name: "Create Schema"
    - url: "/metadata/${ENTITY_NAME}/schema=${ENTITY_VERSION_2}"
    - headers: {Content-Type: application/json}
    - group: "metadata/PUT"
    - method: PUT
    - body: {file: "test-metadata-update-v2.json"}
    - stop_on_failure: True
    - validators:
        - {query: "objectType", operator: "empty", expected: ""}

# Verify v2.

- test: # verify getting entity name list
    - name: "Verify Schema: /metadata"
    - url: "/metadata" 
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - expected_status: 200
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entities", operator: "gt", expected: 0}
        - {query: "entities", operator: "contains", expected: "${ENTITY_NAME}"}

- test: # verify get versions for valid entity
    - name: "Verify Schema: /metadata/entity"
    - url: "/metadata/${ENTITY_NAME}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "versions", operator: "count", expected: 2}

- test: # verify get specific version (v1 is still active)
    - name: "Verify Schema: /metadata/entity/v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "entityInfo/defaultVersion", operator: "empty", expected: ""}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "active"}

- test: # verify get specific version (v2 exists and is active)
    - name: "Verify Schema: /metadata/entity/v2"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "entityInfo/defaultVersion", operator: "empty", expected: ""}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_2}"}
        - {query: "schema/status/value", operator: "eq", expected: "active"}

# Update entity info, add an index.

- test: # verify has no index initially
    - name: "Verify Index Missing"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "entityInfo/indexes", operator: "empty", expected: ""}

- test: # add index
    - name: "Add Index"
    - url: "/metadata/${ENTITY_NAME}"
    - headers: {Content-Type: application/json}
    - group: "metadata/PUT"
    - method: PUT
    - body: {file: "test-metadata-update-index.json"}
    - stop_on_failure: True

- test: # verify has index after update
    - name: "Verify Index Added"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "entityInfo/defaultVersion", operator: "empty", expected: ""}
        - {query: "entityInfo/indexes", operator: "count", expected: 1}

# Test default functionality
# NOTE previous tests must have verified that each version is NOT default

- test: # make v2 default
    - name: "Update Default: v2"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}/default"
    - headers: {Content-Type: application/json}
    - group: "metadata/POST"
    - method: POST
    - stop_on_failure: True
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_2}"}
        - {query: "entityInfo/defaultVersion", operator: "eq", expected: "${ENTITY_VERSION_2}"}

# Deprecate v1.

- test: # do deprecation
    - name: "Deprecate: v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}/deprecated?comment=testing+deprecation"
    - headers: {Content-Type: application/json}
    - group: "metadata/PUT"
    - method: PUT
    - stop_on_failure: True
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "deprecated"}
        - {query: "schema/status/log/0/comment", operator: "eq", expected: "testing deprecation"}
- test: # verify find gets same deprecated version
    - name: "Verify Deprecation: v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "deprecated"}
        - {query: "schema/status/log/0/comment", operator: "eq", expected: "testing deprecation"}

# Disable v1.

- test: # do disabling
    - name: "Disable: v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}/disabled?comment=testing+disabled"
    - headers: {Content-Type: application/json}
    - group: "metadata/PUT"
    - method: PUT
    - stop_on_failure: True
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "disabled"}
        - {query: "schema/status/log/0/comment", operator: "eq", expected: "testing deprecation"}
        - {query: "schema/status/log/1/comment", operator: "eq", expected: "testing disabled"}
- test: # verify find gets same disabled version
    - name: "Verify Disabled: v1"
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - headers: {Content-Type: application/json}
    - group: "metadata/GET"
    - method: GET
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {query: "schema/status/value", operator: "eq", expected: "disabled"}
        - {query: "schema/status/log/0/comment", operator: "eq", expected: "testing deprecation"}
        - {query: "schema/status/log/1/comment", operator: "eq", expected: "testing disabled"}

